{
  "_args": [
    [
      {
        "raw": "react-moment",
        "scope": null,
        "escapedName": "react-moment",
        "name": "react-moment",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\UpWork\\Chaitanya\\feb 8 commit - with meetup\\feb 8 commit - with meetup"
    ]
  ],
  "_from": "react-moment@latest",
  "_id": "react-moment@0.7.0",
  "_inCache": true,
  "_location": "/react-moment",
  "_nodeVersion": "6.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-moment-0.7.0.tgz_1515760289072_0.847675240598619"
  },
  "_npmUser": {
    "name": "web-headzoo",
    "email": "sean@headzoo.io"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-moment",
    "scope": null,
    "escapedName": "react-moment",
    "name": "react-moment",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-moment/-/react-moment-0.7.0.tgz",
  "_shasum": "9ccb5c87be683d08c253b48469167443f09c3d89",
  "_shrinkwrap": null,
  "_spec": "react-moment",
  "_where": "C:\\UpWork\\Chaitanya\\feb 8 commit - with meetup\\feb 8 commit - with meetup",
  "author": {
    "name": "Sean Hickey",
    "url": "http://headzoo.io"
  },
  "bugs": {
    "url": "https://github.com/headzoo/react-moment/issues"
  },
  "dependencies": {},
  "description": "React component for the moment date library.",
  "devDependencies": {
    "@storybook/addon-actions": "^3.0.1",
    "@storybook/addon-knobs": "^3.2.0",
    "@storybook/addon-options": "^3.1.6",
    "@storybook/react": "3.0.1",
    "babel-core": "^6.14.0",
    "babel-eslint": "^7.2.3",
    "babel-jest": "^15.0.0",
    "babel-loader": "^6.2.5",
    "babel-plugin-module-resolver": "^2.7.1",
    "babel-preset-env": "^1.6.1",
    "babel-preset-react": "^6.11.1",
    "babel-preset-stage-2": "^6.13.0",
    "coveralls": "^3.0.0",
    "eslint": "^3.19.0",
    "eslint-config-airbnb": "^15.0.2",
    "eslint-import-resolver-babel-module": "^3.0.0",
    "eslint-plugin-import": "^2.7.0",
    "eslint-plugin-jsx-a11y": "^5.1.1",
    "eslint-plugin-react": "^7.1.0",
    "jest": "^15.1.1",
    "json-loader": "^0.5.4",
    "moment": "^2.19.1",
    "moment-timezone": "^0.5.14",
    "prop-types": "^15.6.0",
    "react": "^15.6.0",
    "react-dom": "^15.6.0",
    "rimraf": "^2.5.4",
    "storybook-addon-jsx": "^4.1.1",
    "webpack": "^1.13.2"
  },
  "directories": {},
  "dist": {
    "shasum": "9ccb5c87be683d08c253b48469167443f09c3d89",
    "tarball": "https://registry.npmjs.org/react-moment/-/react-moment-0.7.0.tgz"
  },
  "gitHead": "fc3a2714477dd358d1954e48e31b388167c85865",
  "homepage": "https://github.com/headzoo/react-moment#readme",
  "jest": {
    "testRegex": "/tests/.*",
    "moduleFileExtensions": [
      "js",
      "jsx"
    ]
  },
  "keywords": [
    "date",
    "moment",
    "react",
    "react-component",
    "time"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "web-headzoo",
      "email": "sean@headzoo.io"
    }
  ],
  "name": "react-moment",
  "optionalDependencies": {},
  "peerDependencies": {
    "moment": "^2.19.1",
    "prop-types": "^15.6.0",
    "react": "^15.6.0 || ^16.0.0"
  },
  "readme": "react-moment\n============\nReact component for the [moment](http://momentjs.com/) date library.\n\n[![Build Status](https://img.shields.io/travis/headzoo/react-moment/master.svg?style=flat-square)](https://travis-ci.org/headzoo/react-moment)\n[![Coverage Status](https://img.shields.io/coveralls/github/headzoo/react-moment.svg?style=flat-square)](https://coveralls.io/github/headzoo/react-moment?branch=master)\n[![NPM Downloads](https://img.shields.io/npm/dm/react-moment.svg?style=flat-square)](https://www.npmjs.com/package/react-moment)\n[![MIT License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square)](https://raw.githubusercontent.com/headzoo/react-moment/master/LICENSE)\n\n* [Installing](#installing)\n* [Timezone Support](#timezone-support)\n* [Quick Start](#quick-start)\n* [Props](#props)\n    * [Interval](#interval)\n    * [Formatting](#formatting)\n    * [Parsing Dates](#parsing-dates)\n    * [Add and Subtract](#add-and-subtract)\n    * [From Now](#from-now)\n    * [From](#from)\n    * [To Now](#to-now)\n    * [To](#to)\n    * [Difference](#difference)\n    * [Filter](#filter)\n    * [Unix Timestamps](#unix-timestamps)\n    * [Timezone](#timezone)\n    * [Calendar](#calendar)\n    * [Locale](#locale)\n    * [Element](#element)\n    * [OnChange](#onchange)\n    * [Other Props](#other-props)\n* [Pooled Timer](#pooled-timer)\n* [Global Config](#global-config)\n* [Usage with React Native](#usage-with-react-native)\n* [License](#license)\n* [Contributors](#contributors)\n\n\n### Installing\nUse npm to install `react-moment` along with its peer dependency, `moment`.\n\n```sh\nnpm install --save moment react-moment\n```\n\n\n### Timezone Support\nThe `moment-timezone` package is required to use the timezone related functions.\n\n```sh\nnpm install --save moment-timezone\n```\n\nThen import the package into your project.\n\n```jsx\nimport React from 'react';\nimport Moment from 'react-moment';\nimport 'moment-timezone';\n\nexport default class App extends React.Component {\n    ...\n}\n```\n\n\n### Quick Start\n\n```jsx\nimport React  from 'react';\nimport Moment from 'react-moment';\n\nexports default class MyComponent extends React.Component {\n    render() {\n        return (\n            const dateToFormat = '1976-04-19T12:59-0500';\n            <Moment>{dateToFormat}</Moment>\n        );\n    }\n}\n```\n\nOutputs:\n\n```html\n<time>Mon Apr 19 1976 12:59:00 GMT-0500</time>\n```\n\nThe above example could also be written this way if you prefer to pass the date using an attribute rather than as a child to `<Moment>`.\n\n```jsx\nimport React  from 'react';\nimport Moment from 'react-moment';\n\nexports default class MyComponent extends React.Component {\n    render() {\n        return (\n            const dateToFormat = '1976-04-19T12:59-0500';\n            <Moment date={dateToFormat} />\n        );\n    }\n}\n```\n\nThe date value may be a string, object, array, or `Date` instance.\n\n```jsx\nimport React  from 'react';\nimport Moment from 'react-moment';\n\nexports default class MyComponent extends React.Component {\n    render() {\n        return (\n            const dateToFormat = new Date('1976-04-19T12:59-0500');\n            <Moment date={dateToFormat} />\n        );\n    }\n}\n```\n\n\n### Props\nThe component supports the following props. See the [Moment docs](https://momentjs.com/docs/) for more information.\n\n#### Interval\n_interval={number}_\n\nBy default the time updates every 60 seconds (60000 milliseconds). Use the `interval` prop to change or disable updating.\n\nUpdates the time every 30 seconds (30000 milliseconds).\n```jsx\nimport React  from 'react';\nimport Moment from 'react-moment';\n\nexports default class MyComponent extends React.Component {\n    render() {\n        return (\n            <Moment interval={30000}>\n                1976-04-19T12:59-0500\n            </Moment>\n        );\n    }\n}\n```\n\nDisables updating.\n```jsx\nimport React  from 'react';\nimport Moment from 'react-moment';\n\nexports default class MyComponent extends React.Component {\n    render() {\n        return (\n            <Moment interval={0}>\n                1976-04-19T12:59-0500\n            </Moment>\n        );\n    }\n}\n```\n\n\n#### Formatting\n_format={string}_\n\nFormats the date according to the given format string. See the [Moment docs on formatting](https://momentjs.com/docs/#/parsing/string-format/) for more information.\n\n```jsx\nimport React  from 'react';\nimport Moment from 'react-moment';\n\nexports default class MyComponent extends React.Component {\n    render() {\n        return (\n            <Moment format=\"YYYY/MM/DD\">\n                1976-04-19T12:59-0500\n            </Moment>\n        );\n    }\n}\n```\n\nOutputs:\n\n```html\n<time>1976/04/19</time>\n```\n\n\n#### Parsing Dates\n_parse={string}_\n\nMoment can parse most standard date formats. Use the `parse` attribute to tell moment how to parse the given date when non-standard. See the [Moment docs on parsing](https://momentjs.com/docs/#/parsing/string-format/) for more information.\n\n```jsx\nimport React  from 'react';\nimport Moment from 'react-moment';\n\nexports default class MyComponent extends React.Component {\n    render() {\n        return (\n            <Moment parse=\"YYYY-MM-DD HH:mm\">\n                1976-04-19 12:59\n            </Moment>\n        );\n    }\n}\n```\n\n#### Add and Subtract\n_add={object}_\n\n_subtract={object}_\n\nUsed to add and subtract periods of time from the given date, with the time periods expressed as object literals. See the [Moment docs on add and subtract](https://momentjs.com/docs/#/manipulating/add/) for more information.\n\n```jsx\nimport React  from 'react';\nimport Moment from 'react-moment';\n\nexports default class MyComponent extends React.Component {\n    render() {\n        const date = new Date();\n\n        return (\n            <div>\n                <Moment add={{ hours: 12 }}>{date}</Moment>\n                <Moment add={{ days: 1, hours: 12 }}>{date}</Moment>\n                <Moment subtract={{ hours: 12 }}>{date}</Moment>\n                <Moment subtract={{ days: 1, hours: 12 }}>{date}</Moment>\n            </div>\n        );\n    }\n}\n```\n\n#### From Now\n_fromNow={bool}_\n\nSometimes called timeago or relative time, displays the date as the time _from now_, e.g. \"5 minutes ago\".\n\n```jsx\nimport React  from 'react';\nimport Moment from 'react-moment';\n\nexports default class MyComponent extends React.Component {\n    render() {\n        return (\n            <Moment fromNow>1976-04-19T12:59-0500</Moment>\n        );\n    }\n}\n```\n\nOutputs:\n\n```html\n<time>40 years ago</time>\n```\n\nIncluding `ago` with `fromNow` will omit the suffix from the relative time.\n\n```jsx\nimport React  from 'react';\nimport Moment from 'react-moment';\n\nexports default class MyComponent extends React.Component {\n    render() {\n        return (\n            <Moment fromNow ago>1976-04-19T12:59-0500</Moment>\n        );\n    }\n}\n```\n\nOutputs:\n\n```html\n<time>40 years</time>\n```\n\n#### From\n_from={string}_\n\n```jsx\nimport React  from 'react';\nimport Moment from 'react-moment';\n\nexports default class MyComponent extends React.Component {\n    render() {\n        return (\n            <Moment from=\"2015-04-19\">1976-04-19T12:59-0500</Moment>\n        );\n    }\n}\n```\n\nOutputs:\n\n```html\n<time>39 years</time>\n```\n\n\n#### To Now\n_toNow={bool}_\n\nSimilar to `fromNow`, but gives the opposite interval.\n\n```jsx\nimport React  from 'react';\nimport Moment from 'react-moment';\n\nexports default class MyComponent extends React.Component {\n    render() {\n        return (\n            <Moment toNow>1976-04-19T12:59-0500</Moment>\n        );\n    }\n}\n```\n\nOutputs:\n\n```html\n<time>40 years ago</time>\n```\n\n\n#### To\n_to={string}_\n\n```jsx\nimport React  from 'react';\nimport Moment from 'react-moment';\n\nexports default class MyComponent extends React.Component {\n    render() {\n        return (\n            <Moment to=\"2015-04-19\">1976-04-19T12:59-0500</Moment>\n        );\n    }\n}\n```\n\nOutputs:\n\n```html\n<time>39 years</time>\n```\n\n#### Filter\n_filter={function}_\n\nA function which modifies/transforms the date value prior to rendering.\n\n```jsx\nimport React  from 'react';\nimport Moment from 'react-moment';\n\nexports default class MyComponent extends React.Component {\n    render() {\n        const toUpperCaseFilter = (d) => {\n            return d.toUpperCase();\n        };\n\n        return (\n            const dateToFormat = '1976-04-19T12:59-0500';\n            <Moment filter={toUpperCaseFilter}>{dateToFormat}</Moment>\n        );\n    }\n}\n```\n\nOutputs:\n\n```html\n<time>MON APR 19 1976 12:59:00 GMT-0500</time>\n```\n\n\n#### Difference\n_diff={string}_\n\n_decimal={bool}_\n\n_unit={string}_\n\n```jsx\nimport React  from 'react';\nimport Moment from 'react-moment';\n\nexports default class MyComponent extends React.Component {\n    render() {\n        return (\n            <div>\n              <Moment diff=\"2015-04-19\">1976-04-19T12:59-0500</Moment>\n              <Moment diff=\"2015-04-19\" unit=\"days\">1976-04-19T12:59-0500</Moment>\n              <Moment diff=\"2015-04-19\" unit=\"years\" decimal>1976-04-19T12:59-0500</Moment>\n            </div>\n        );\n    }\n}\n```\n\n\n#### Unix Timestamps\n_unix={bool}_\n\nTells Moment to parse the given date value as a unix timestamp.\n\n```jsx\nimport React  from 'react';\nimport Moment from 'react-moment';\n\nexports default class MyComponent extends React.Component {\n    render() {\n        const unixTimestamp = 198784740;\n        return (\n            <Moment unix>{unixTimestamp}</Moment>\n        );\n    }\n}\n```\n\nOutputs:\n\n```html\n<time>Mon Apr 19 1976 12:59:00 GMT-0500</time>\n```\n\n\n#### Timezone\n_tz={string}_\n\nSets the timezone. To enable server side rendering (SSR), client and server has to provide same datetime, based on common Timezone. The `tz` attribute will enable set the common timezone.\n\n```jsx\nimport React  from 'react';\nimport Moment from 'react-moment';\nimport 'moment-timezone';\n\nexports default class MyComponent extends React.Component {\n    render() {\n        const unixTimestamp = 198784740;\n        return (\n            <Moment unix tz=\"America/Los_Angeles\">\n                {unixTimestamp}\n            </Moment>\n        );\n    }\n}\n```\n\nOutputs:\n\n```html\n<time>Mon Apr 19 1976 09:59:00 GMT-0800</time>\n```\n\n#### Calendar\n_calendar={object|bool}_\n\nCustomize the strings used for the calendar function.\n\n```jsx\nimport React  from 'react';\nimport Moment from 'react-moment';\n\nexports default class MyComponent extends React.Component {\n    render() {\n        const calendarStrings = {\n            lastDay : '[Yesterday at] LT',\n            sameDay : '[Today at] LT',\n            nextDay : '[Tomorrow at] LT',\n            lastWeek : '[last] dddd [at] LT',\n            nextWeek : 'dddd [at] LT',\n            sameElse : 'L'\n        };\n\n        return (\n            <Moment calendar={calendarStrings}>\n                '1976-04-19T12:59-0500'\n            </Moment>\n        );\n    }\n}\n```\n\n\n#### Locale\n_locale={string}_\n\nSets the locale used to display the date.\n\n```jsx\nimport React  from 'react';\nimport Moment from 'react-moment';\n\nexports default class MyComponent extends React.Component {\n    render() {\n        const dateToFormat = '1976-04-19T12:59-0500';\n        return (\n            <Moment locale=\"de\">{dateToFormat}</Moment>\n        );\n    }\n}\n```\n\n**Note**\nIn some cases the language file is not automatically loaded by moment, and it must be manually loaded. For example, to use the French locale, add the following to your bootstrap (e.g. index.js) script.\n\n```js\nimport 'moment/locale/fr';\n```\n\n#### Element\n_element={string|React.Component}_\n\nThe element type to render as (string or function).\n\n```jsx\nimport React  from 'react';\nimport Moment from 'react-moment';\n\nexports default class MyComponent extends React.Component {\n    render() {\n        return (\n            <Moment element=\"span\">1976-04-19T12:59-0500</Moment>\n        );\n    }\n}\n```\n\nOutputs:\n\n```html\n<span>Mon Apr 19 1976 12:59:00 GMT-0500</span>\n```\n\n\n#### OnChange\n_onChange={func}_\n\nThe `onChange` prop is called each time the date is updated, which by default is every 60 seconds. The function receives the new date value.\n\n```jsx\nimport React  from 'react';\nimport Moment from 'react-moment';\n\nexports default class MyComponent extends React.Component {\n    render() {\n        return (\n            <Moment onChange={(val) => { console.log(val); }}>\n                1976-04-19T12:59-0500\n            </Moment>\n        );\n    }\n}\n```\n\n\n#### Other Props\nAny other properties are passed to the `<time>` element.\n\n```jsx\nimport React  from 'react';\nimport Moment from 'react-moment';\n\nexports default class MyComponent extends React.Component {\n    render() {\n        return (\n            <Moment className=\"datetime\" aria-hidden={true}>\n                1976-04-19T12:59-0500\n            </Moment>\n        );\n    }\n}\n```\n\nOutputs:\n\n```html\n<time class=\"datetime\" aria-hidden=\"true\">Mon Apr 19 1976 12:59:00 GMT-0500</time>\n```\n\n\n### Pooled Timer\nBy default a timer is created for each mounted `<Moment />` instance to update the date value, which is fine when you only have a few instances on the page. However, performance can take a hit when you have many mounted instance. The problem is solved by using a pooled timer.\n\nWhen pooled timing is enabled, react-moment will only use a single timer to update all mounted `<Moment />` instances. Pooled timing is enabled by calling `startPooledTimer()` and stopped by calling `clearPooledTimer()`.\n\nCall the `startPooledTimer()` static method from your bootstrapping script (usually index.js) to initialize the timer.\n\n```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Moment from 'react-moment';\nimport App from './components/app';\n\n// Start the pooled timer which runs every 60 seconds\n// (60000 milliseconds) by default.\nMoment.startPooledTimer();\n\n// Or set the update interval. This will update the mounted\n// instances every 30 seconds.\n// Moment.startPooledTimer(30000);\n\nReactDOM.render(<App />, document.getElementById('mount'));\n```\n\nNote: The `interval` prop set on each `<Moment />` instance is ignored when using pooled timing, except where `interval={0}` to disable updating.\n\nNote: The `startPooledTimer()` method must be called before any `<Moment />` instances are mounted.\n\n\n### Global Config\nSome prop values may be set globally so you don't have to set them on every react-moment instance.\n\n* globalMoment\n* globalLocale\n* globalFormat\n* globalParse\n* globalFilter\n* globalElement\n\n```jsx\nimport React  from 'react';\nimport ReactDOM from 'react-dom';\nimport moment from 'moment/min/moment-with-locales';\nimport Moment from 'react-moment';\n\n// Sets the moment instance to use.\nMoment.globalMoment = moment;\n\n// Set the locale for every react-moment instance to French.\nMoment.globalLocale = 'fr';\n\n// Set the output format for every react-moment instance.\nMoment.globalFormat = 'D MMM YYYY';\n\n// Use a <span> tag for every react-moment instance.\nMoment.globalElement = 'span';\n\n// Upper case all rendered dates.\nMoment.globalFilter = (d) => {\n    return d.toUpperCase();\n};\n\nconst App = () => (\n    <Moment>1976-04-19T12:59-0500</Moment>\n);\n\nReactDOM.render(<App />, document.getElementById('mount'));\n```\n\nYou can override the global values on a per-instance basis using regular props.\n\n```jsx\nimport React  from 'react';\nimport ReactDOM from 'react-dom';\nimport Moment from 'react-moment';\n\n// Set the locale for every react-moment instance to French.\nMoment.globalLocale = 'fr';\n\nconst App = () => (\n    <div>\n        {/*\n            Renders using the 'fr' locale due to the global setting.\n        */}\n        <Moment>1976-04-19T12:59-0500</Moment>\n\n        {/*\n            Overrides the global locale and uses 'en' instead.\n        */}\n        <Moment locale=\"en\">1976-04-19T12:59-0500</Moment>\n    </div>\n);\n\nReactDOM.render(<App />, document.getElementById('mount'));\n```\n\n\n### Usage with React Native\nIf you are using React Native then you'll have to pass in `Text`.\n\n```javascript\nimport Moment from 'react-moment';\nimport { Text } from 'react-native';\n```\n\nThen:\n\n```html\n<Moment element={Text} >1976-04-19T12:59-0500</Moment>\n```\n\n\n### License\nThis software is released under the MIT license. See LICENSE for more details.\n\n\n### Contributors\n\n* [markacola](https://github.com/markacola)\n* [nclavaud](https://github.com/nclavaud)\n* [Idan Gozlan](https://github.com/idangozlan)\n* [Oliver Vartiainen](https://github.com/firoxer)\n* [a-x-](https://github.com/a-x-)\n* [khell](https://github.com/khell)\n* [ali-master](https://github.com/ali-master)\n* [tujoworker](https://github.com/tujoworker)\n* [GaelGRIFFON](https://github.com/GaelGRIFFON)\n* [jamesjryan](https://github.com/jamesjryan)\n* [brasskazoo](https://github.com/brasskazoo)\n* [henvo](https://github.com/henvo)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/headzoo/react-moment.git"
  },
  "scripts": {
    "build": "npm run clean && webpack -p",
    "clean": "rimraf ./dist/index.js",
    "lint": "eslint ./src --cache --cache-location=.cache/eslint --ext .js,.jsx",
    "lint:fix": "npm run lint -- --fix",
    "storybook:build": "build-storybook -o stories/build",
    "storybook:dev": "start-storybook -p 6006",
    "test": "export TZ=America/New_York; jest --coverage",
    "travis-test": "npm run test && cat ./coverage/lcov.info | ./node_modules/.bin/coveralls"
  },
  "types": "dist/index.d.ts",
  "version": "0.7.0"
}
